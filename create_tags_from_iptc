#!/usr/bin/python

import os
import pyexiv2
import re
import sqlite3 as sql
import sys

#import pdb
#pdb.set_trace()

#
# ===== get_digikam_db_file =====
#
def get_digikam_db_file ():
    "Locate and return the digikam database file."
    digikam_config = os.environ['HOME'] + "/.kde/share/config/digikamrc"

    regex = re.compile(r'^Database Name=')
    try:
        with open(digikam_config) as config_file:
            for config_line in config_file:
                match = regex.match(config_line)
                if match <> None:
                    match=regex.split(config_line)
                    db_file = match[1].rstrip("\n") + 'digikam4.db'
                    break
        if ( not os.path.isfile(db_file) ):
            print "ERROR: could not find digikam database file", db_file
            db_file = None
    except IOError:
        print "ERROR: digikam not installed, could not find config file", digikam_config
        db_file = None

    return db_file

#
# ===== get_tag_id function =====
#
def get_tag_id (tag_name, parent_tag_id):
    "Query the tags table for the passed name and pid and return the id if found or 'None' if not found."
    tag_cursor = con.cursor()
    tag_cursor.execute("select tags.id " +
                       "  from tags "     +
                       " where name = :Name " +
                       "   and pid  = :Pid", {"Name": tag_name, "Pid": parent_tag_id})
    tag_id = tag_cursor.fetchone()

    return tag_id

#
# ===== add_new_tag =====
#
def add_new_tag(tag_name, parent_tag_id):
    "Add a new row to the Tags table."
    ins_tag_cur = con.cursor()
    ins_tag_cur.execute("insert into tags (pid, name) values(?, ?)", (parent_tag_id, tag_name))
    
    # convert lastrowid to a list so it will be consistent with the output of get_tag_id
    return [ins_tag_cur.lastrowid]

#
# ===== create_tags function =====
#
def create_tags(iptc_category):
    "Split the iptc category passed and return the id of the lowest level tag."
    #print '   ', iptc_category
    taglist = iptc_category.split('.')
    parent_tag_id = 0
    for tag_name in taglist:
        #print '       ', tag_name
        tag_id = get_tag_id(tag_name, parent_tag_id)
        if tag_id == None:
            #print "            digikam tag not found for:", tag_name
            tag_id = add_new_tag(tag_name, parent_tag_id)
        #else:
            #print "            digikam tag_id =", tag_id[0]
        parent_tag_id = tag_id[0]
   
    # retrun the last tag inserted/queried, ie. the lowest level tag.
    return tag_id[0]

#
# ===== add_tag_to_image =====
# 
def add_tag_to_image(image_id, tag_id):
    "Add a tag to an image"
    ins_cur = con.cursor()
    try:
        ins_cur.execute("insert into imagetags (imageid, tagid) values(?, ?)", (image_id, tag_id))
    except sql.IntegrityError as e:
        if 'unique constraint' in e.args[0].lower():
            print 'There is unique constraint violation on the imagetags table with imageid =', image_id, 'tag_id =', tag_id, 'continuing...'
        else:
            raise

#
# ===== Main program begins here =====
digikam_db_file = get_digikam_db_file()

if digikam_db_file == None:
    sys.exit(1)
else:
    print "digikam database file in use =", digikam_db_file

con = sql.connect(digikam_db_file)
with con:
    cur = con.cursor()
    cur.execute("select images.id, albumroots.specificpath || albums.relativepath || '/' || images.name " + 
                "  from images join albums on images.album = albums.id " + 
                "              join albumroots on albums.albumroot = albumroots.id")
    while True:
      digikam_image = cur.fetchone()
      if digikam_image == None:
        break
      print 'file =', digikam_image[1]
      imagedata = pyexiv2.ImageMetadata(digikam_image[1])
      try:
        imagedata.read()
        tag = imagedata.get('Iptc.Application2.SuppCategory')
        if tag == None:
          print '    No IPTC SuppCategory metadata found for', digikam_image[1]
        else:
          for category in tag.value:
            lowest_level_tag_id = create_tags(category)
            add_tag_to_image(digikam_image[0], lowest_level_tag_id)
      except IOError:
        print '    No IPTC SuppCategory metadata found for', digikam_image[1]
